/*** Timeago is a jQuery plugin that makes it easy to support automatically***/
(function($){Date.prototype.format=function(fmt){var o={"M+":this.getMonth()+1,"d+":this.getDate(),"h+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),"S":this.getMilliseconds()};if(/(y+)/.test(fmt)){fmt=fmt.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))}for(var k in o){if(new RegExp("("+k+")").test(fmt)){fmt=fmt.replace(RegExp.$1,(RegExp.$1.length==1)?(o[k]):(("00"+o[k]).substr((""+o[k]).length)))}}return fmt};var $t={settings:{refreshMillis:60000,strings:{suffixAgo:"前",seconds:"刚刚",minute:"1分钟",minutes:"%d分钟",hour:"1小时",hours:"%d小时",numbers:[]}},inWords:function(date){if(isLastYear(date)){return date.format("yyyy-MM-dd")}if(daysAgo(date)){return date.format("MM-dd hh:mm")}var distanceMillis=distance(date);var $l=this.settings.strings;var suffix=$l.suffixAgo;var seconds=Math.abs(distanceMillis)/1000;var minutes=seconds/60;var hours=minutes/60;var days=hours/24;var years=days/365;function substitute(stringOrFunction,number){var string=$.isFunction(stringOrFunction)?stringOrFunction(number,distanceMillis):stringOrFunction;var value=($l.numbers&&$l.numbers[number])||number;return string.replace(/%d/i,value)}function originDate(distanceMillis){var d=new Date(+new Date()-distanceMillis);var M=d.getMonth()+1,D=d.getDate(),H=d.getHours(),I=d.getMinutes();return(M<10?"0"+M:M)+"-"+(D<10?"0"+D:D)+" "+(H<10?"0"+H:H)+":"+(I<10?"0"+I:I)}if(seconds<45){words=substitute($l.seconds,Math.round(seconds))}else{if(seconds<90){words=substitute($l.minute,1)}else{if(minutes<45){words=substitute($l.minutes,Math.round(minutes))}else{if(minutes<90){words=substitute($l.hour,1)}else{if(hours<23){words=substitute($l.hours,Math.round(hours))}else{words=originDate(distanceMillis)}}}}}if(words=="刚刚"){return words}if(hours>=23){suffix=""}return $.trim([words,suffix].join(""))},parse:function(iso8601){var s=$.trim(iso8601);s=s.replace(/\.\d+/,"");s=s.replace(/-/,"/").replace(/-/,"/");s=s.replace(/T/," ").replace(/Z/," UTC");s=s.replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2");return new Date(s*1)},datetime:function(elem){var iso8601=$t.isTime(elem)?$(elem).attr("datetime"):$(elem).attr("title");return $t.parse(iso8601)},isTime:function(elem){return $(elem).get(0).tagName.toLowerCase()==="time"}};var functions={init:function(){var refresh_el=$.proxy(refresh,this);refresh_el();var $s=$t.settings;if($s.refreshMillis>0){setInterval(refresh_el,$s.refreshMillis)}},update:function(time){$(this).data("timeago",{datetime:$t.parse(time)});refresh.apply(this)},updateFromDOM:function(){$(this).data("timeago",{datetime:$t.parse($t.isTime(this)?$(this).attr("datetime"):$(this).attr("title"))});refresh.apply(this)}};$.fn.timeago=function(action,options){var fn=action?functions[action]:functions.init;if(!fn){throw new Error("Unknown function name '"+action+"' for timeago")}this.each(function(){fn.call(this,options)});return this};function refresh(){var data=prepareData(this),date=data.datetime;if(!isNaN(date)){$(this).text($t.inWords(date))}return this}function prepareData(element){element=$(element);if(!element.data("timeago")){element.data("timeago",{datetime:$t.datetime(element)});var text=$.trim(element.text());if(text.length>0&&!($t.isTime(element)&&element.attr("title"))){element.attr("title",text)}}return element.data("timeago")}function distance(date){return(new Date().getTime()-date.getTime())}function daysAgo(date){var now=new Date();return(now.getMonth()>date.getMonth())||(now.getDate()>date.getDate())}function isLastYear(date){return new Date().getFullYear()>date.getFullYear()}})(window.Zepto||window.jQuery);


var localActions = {
    queueNames : "localActions,delayedActions",
    delayedInterval : null,
    queues : {},

    getStoredQueues : function(){
        var savedQueue = localStorage['queues'];
        if(savedQueue == "undefined" || savedQueue == undefined) savedQueue = {};
        if(typeof savedQueue == "string") savedQueue = JSON.parse(savedQueue);
        return savedQueue;
    },
    
    init : function(){
        this.Q = this.getStoredQueues();
        if(navigator.onLine){
            for(k in this.Q){
                var queue = this.Q[k];
                queue.length && this.clear(k)
            };
        };
    },

    add : function(key,obj){
        var queue = this.Q[key] || [];
        queue.push(obj);
        this.save(key,queue);

        var _this = this;

        if(key == "delayedActions" && !this.delayedInterval){
            this.delayedInterval = setInterval(function(){
                _this.clear(key);
                console.log("checkDelayedActions");
            },3000);
        }
    },

    save : function(key,queue){
        this.Q[key] = queue;
        localStorage['queues'] = JSON.stringify(this.Q);
    },

    clear : function(key){
        var queue = this.Q[key];
        while(queue.length){
            var t = queue.shift(),
                fnname = t['fnname'],
                params = t['params'],
                fn = this.callbacks[fnname];
            if(fn) fn(params);
        };
        this.save(key,queue);
        if(!queue.length && key == "delayedActions") {
            clearInterval(this.delayedInterval);
            this.delayedInterval = null;
        }
    },

    callbacks : {
        mediaLike  : function(params, success, fail){
            var url = "/pgc/"+params.type+"/",
                data = { "media_id" : params.media_id };

            if(is_api){
                url = "/api/2"+url;
                data = $.extend(data,common_params);
            };

            //alert(JSON.stringify(data));

            $.post(url,data)
             .fail(ajaxNetworkErrorCallback)
             .done(function(d){
                if(d.message == 'success'){ 
                    if(success) success();
                }else{
                    global_tip(NETWORKTIPS.SERVERERROR);
                    if(fail) fail();
                }
             })
        },

        repin : function(params){
            //params :  {type:repin/unrepin,id:xx}
            var url = "/group/article/"+params.id+"/"+params.type+"/",
                data = {}; 
            
            if(is_api){ 
                url = "/2/data/item_action/";
                data = $.extend({
                    "group_id" : params.id,
                    "action"   : params.type
                },common_params);
            };

            $.post(url,data)
             .fail(ajaxNetworkErrorCallback)
             .done(function(d){
                if(d.message !== 'success'){ global_tip(NETWORKTIPS.SERVERERROR) }
             });
        },

        dislike : function(params){
            var url = "/api/dislike/",
                data = {'group_id': params.id,'action':'dislike'};
            
            if(is_api){
                url = "/2/data/item_action/";
                data = $.extend(data,common_params)
            };

            $.post(url,data)
             .fail(ajaxNetworkErrorCallback)
             .done(function(){  global_tip(NETWORKTIPS.RECOMMENDDISLIKE) })
        },

        actionLog : function(params){
            if(!params) return;
            params.tag = params.tag || "headline";
            var url = "/action_log/",
                data = {
                    label : params.label,
                    value : params.id,
                    tag   : 'go_detail'
                };
            
            if(is_api){
                url = "/2/wap/action_log/";
                data = $.extend(data,common_params);
            };

            $.post(url,data)
            /*
             .done(function(d){
                var s = [];
                for(k in d) s.push(k+":"+d[k]);
                alert(s.join(","))
             });
            */
        }
    },

    networkRequired : function(fnname, params){
        if(navigator.onLine){
            var fn = this.callbacks[fnname];
            if(fn) fn(params);
        }else{
            this.add("localActions",{
                "fnname" : fnname,
                "params" : params
            });
        }
    },

    execCommand : function(fnname, params, success, fail){
        var fn = this.callbacks[fnname];
        if(!fn) return;
        fn(params, success, fail);
    }
};

$(function(){
    localActions.init();
});

//$.request; $.hash
$.request=function(paras){var url=location.search; var paraString=url.substring(url.indexOf("?")+1,url.length).split("&"); var paraObj={}; for(i=0;j=paraString[i];i++){paraObj[j.substring(0,j.indexOf("=")).toLowerCase()]=j.substring(j.indexOf("=")+1,j.length) }; if(!paras) return paraObj; var returnValue=paraObj[paras.toLowerCase()]; return returnValue ? $.trim(returnValue) : ""};
$.hash=function(){var s=location.hash.substr(1),hashQuery={};if(s){var arr=s.split("&");for(var i=0;i<arr.length;i++){var t=arr[i].split("=");hashQuery[t[0]]=t[1]}}if(typeof arguments[0]=="string"){return hashQuery[arguments[0]]}if(typeof arguments[0]=="object"){for(var k in arguments[0]){hashQuery[k]=arguments[0][k]}var s2="";for(var k in hashQuery){s2+=k+"="+hashQuery[k]+"&"}location.href="#"+s2.substring(0,s2.length-1)}};
$.timestamp=function(){return +new Date()};


var is_toutiao =  location.host.indexOf("toutiao.com") >= 0,
    is_api = location.host.indexOf("snssdk.com") >= 0,
    ua = navigator.userAgent,

    NETWORKTIPS = {
        "RETRY"             :   "网络失败,点击重试",
        "COMMENTRETRY"      :   "评论加载失败,点击重试",
        "NETWORKERROR"      :   "网络失败",
        "LOADING"           :   "加载中...",
        "WAITE"             :   "加载中,请稍后",
        "RECOMMENDING"      :   "正在推荐...",
        "RECOMMENDCOUNT"    :   "为您推荐了#n#篇文章",
        "RECOMMENDEMPTY"    :   "暂无更新,请休息一会儿",
        "RECOMMENDDISLIKE"  :   "将减少类似推荐",
        "HASMORE"           :   "查看更多",
        "SENDING"           :   "正在提交",
        "SENDINGERROR"      :   "发表失败",
        "SENDINGSUCCESS"    :   "发表成功",
        "GEOLOCATIONERROR"  :   "获取地理位置失败",
        "NOSEARCHDATA"      :   "暂无搜索结果",
        "SERVERERROR"       :   "服务异常,请稍后重试"
    };

$.browser = $.browser|| {};
$.browser.ios = /iPhone|iPod|iPad/i.test(ua);
$.browser.iphone = /iPhone/i.test(ua);
$.browser.ipad = /iPad/i.test(ua);
$.browser.android = /Android/i.test(ua);
$.browser.android4 = /Android\s4/i.test(ua);
$.browser.android2 = /Android\s2/i.test(ua);


var errorimglist = [];
function errorimg(){
  errorimglist.push(this.src);
  console.log("image error :"+this.src);
  this.style.opacity = "0";
  //this.src = this.src.replace("//p0","//p").replace("//i0","//i").replace("//v0","//v");
};

function loadimg(){
  //console.log("image load :"+this.src);
  this.style.opacity = "1";
};


function ajaxNetworkErrorCallback(){
    global_tip(NETWORKTIPS.NETWORKERROR);
};


//常用api请求
function actionLog(label,id){
    localActions.add("delayedActions",{
        "fnname" : "actionLog",
        "params" : {
            "label"  : label,
            "id"     : id
        }
    });
};


function mediaLike(btn){
    var $btn = $(btn),  
        media_id = $btn.attr("media-id"),
        $followers = $("[data-type=media-follower]").filter("[media-id="+media_id+"]"),
        media_like_stat = $btn.attr("data-action");

    function callback(){
        media_like_stat == "unlike" ? $btn.attr("data-action","like").text("订阅") : $btn.attr("data-action","unlike").text("已订阅");   
        if($followers.length){
            var count = parseInt($followers.text());
            $followers.text(media_like_stat == "unlike" ? count-1 : count+1)
        };
    };

    function doAction(){
        localActions.execCommand("mediaLike",{ 
            "media_id": media_id, 
            "type":media_like_stat
        }, callback);

        var action_label = media_like_stat == "like"?"subscribe":"unsubscribe";
        actionLog(action_label,media_id);
    };
    
    is_api? doAction() : user.loginRequired(doAction);
};


//工具
function initScrollEvents(){
    if(window.__tt_initScrollEvents_flag) {
        return;
    }
    var scrollEndTimer, offset = 100;
    function globalScroll(e){
        var theDocumentHeight = document.height || document.body.scrollHeight;

        var y = window.scrollY || window.pageYOffset || document.documentElement.scrollTop;
            
        if( y >= theDocumentHeight - (window.innerHeight || document.documentElement.clientHeight) - offset)  $(window).trigger("scrollBottom", e.type);
        
        if( e.type == 'scroll'){
            if(scrollEndTimer) clearTimeout(scrollEndTimer);
            scrollEndTimer = setTimeout(function(){ $(window).trigger("scrollEnd", {scrollTop: y}) },50);
        }
    };
    $(window).on("scroll load afterflow",globalScroll);
    window.__tt_initScrollEvents_flag = true;
};

animateScrollTo = function(option){
    var top = 0;
    if(option){
        if(option.offset)   top += option.offset;
        if(option.obj)      top += option.obj.offset().top;
    };
    setTimeout(function(){
        $("html, body").animate({ scrollTop: top }, 400);
    },0)        
    return this;
};

window.scrollToTop = function(){
    window.scrollTo(0,0);
};

function debug(s){
    var $d = $("#debug");
    if(!$d.length){ 
        $("<div id='debug'/>").appendTo("body");
        $d = $("#debug");
    };
    $d.text(s);
};

(function($) {
    var navRect = null;

    function _calcNavRect() {
        var nav = document.querySelector('nav');
        return nav ? nav.getBoundingClientRect() : null;
    }
    window.__ttGetNavRect = function() {
        return navRect || _calcNavRect();
    };

    $(function() {
        if(!navRect) {
            navRect = _calcNavRect();
        }
    });

})(window.Zepto || window.jQuery);


function global_tip(str){
    var p = $("<div class='global_tip'/>").appendTo('body'),
        h = document.querySelector("nav"),
        tip_top = 0;

    var rect = __ttGetNavRect();
    if(rect) {
        tip_top = Math.max(0, rect.top + rect.height);
    }
    p.hide().text(str).css("top",tip_top);

    setTimeout(function() {
        p.show();
    });

    setTimeout(function(){
        p.animate({opacity: 0}, 150, null, function() {
            p.remove();
        });
    },2000);
};

function formatDuration(duration) {
    var miniute = 0,
        second = duration;

    second = duration%60;
    miniute = parseInt(duration/60);

    return [('00'+miniute).slice(-2), ('00'+second).slice(-2)].join(':');
}

function checkUserLogin() {
    // return true;
    if(window.isUserLogin && isUserLogin()) {
        return true;
    }else {
        listener.trigger('com.neihanshequ', 'showlogin');
        return false;
    }
}

var __tt_resize_time_Id = null;
var __tt_resize_end_inited = false;
function initResizeEndEvent() {
    if(__tt_resize_end_inited) {
        return;
    }
    var handleResizeFunc = function() {
        listener.trigger('com.neihanshequ', 'onResizeEnd');
    }
    $(window).resize(function() {
        clearTimeout(__tt_resize_time_Id);
        __tt_resize_time_Id = setTimeout(function() {
            handleResizeFunc();
        }, 400);
    });
    __tt_resize_end_inited = true;
}

function convertListToLinkTable(list) {
    var ret = {};

    var l = list.reverse();

    function LTItem(v) {
        this.value = v;
        this.nextValue = -1;
        this.preValue = -1;
    }

    var next = null;
    $(l).each(function(idx, item) {
        var cur = new LTItem(item);
        if(next) {
            cur.nextValue = next.value;
            next.preValue = cur.value;
        }

        next = cur;

        ret[item] = cur;
    });

    return ret;
}

function saveGroupIdList(list) {
    if('gStore' in window) {
        var l = [].concat(list);
        var linkTable = convertListToLinkTable(l);
        gStore.set(Constant.GROUP_ID_LIST_KEY_PREFIX, JSON.stringify(linkTable));   
    }
}

function getNextGroupId(linkTable, curId) {
    var ret = null;
    if(linkTable) {
        var item = linkTable[curId];
        if(item) {
            ret = item.nextValue;
        }
    }
    return ret;
}

function getPrevGroupId(linkTable, curId) {
    var ret = null;
    if(linkTable) {
        var item = linkTable[curId];
        if(item) {
            ret = item.preValue;
        }
    }
    return ret;
}

;(function ucShareGetPos() {
    var getPos = {
        getTop: function(e) {
            var offset = e.offsetTop;
            if (e.offsetParent != null) offset += getPos.getTop(e.offsetParent);
            return offset;
        },
        getLeft: function(e) {
            var offset = e.offsetLeft;
            if (e.offsetParent != null) offset += getPos.getLeft(e.offsetParent);
            return offset;
        },
        getCss3offsetTop: function(e) {
            var css3offset = getComputedStyle(e, null).webkitTransform;
            if (css3offset == "none") {
                var css3offsetTop = 0;
            } else { //存在CSS3属性
                var css3offsetTop = parseInt(css3offset.split(",")[5].replace(")", ""))
            }
            if (e.parentNode.tagName != "BODY") css3offsetTop += getPos.getCss3offsetTop(e.parentNode);
            return css3offsetTop;
        },
        getCss3offsetLeft: function(e) {
            var css3offset = getComputedStyle(e, null).webkitTransform;
            if (css3offset == "none") {
                var css3offsetLeft = 0;
            } else { //存在CSS3属性
                var css3offsetLeft = parseInt(css3offset.split(",")[4])
            }
            if (e.parentNode.tagName != "BODY") css3offsetLeft += getPos.getCss3offsetLeft(e.parentNode);
            return css3offsetLeft;
        },
        getNodeInfoById: function(e) {
            var myNode = e;
            if(typeof e === 'string') {
                myNode = document.getElementById(e);
            }
            if (myNode) {
                var pos = [getPos.getLeft(myNode) + getPos.getCss3offsetLeft(myNode), getPos.getTop(myNode) + getPos.getCss3offsetTop(myNode), myNode.offsetWidth, myNode.offsetHeight]
                return (pos)
            } else {
                return ""
            }
        }
    };

    window.getPos = getPos;
}());

function countFormat(count) {
    // console.log(count);
    if(count >= 10000) {
        count /= 10000.0;
        count = Number(count).toFixed(1);
        if(count.indexOf('.0') != -1) {
            count = count.replace('.0', '');
        }
        count += '万';
    }
    return count;
}

function formatCountNumber() {
    var list = $('.J-number-format');

    list.each(function(idx, item) {
        var $item = $(item);
        var count = $item.data('count');
        if(count >= 10000) {
            count = countFormat(count);
            $item.text(count);
        }
    });

    list.removeClass('J-number-format');
}

function formatDurationItems() {
    $('.total-time').each(function(idx, el) {
        var $el = $(el);
        var duration = ~~($el.data('duration'));
        var ret = formatDuration(duration);
        $el.text(ret).removeClass('total-time');
    });
}

function htmlEntities(str){
    return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
};

(function($) {
    var ua = navigator.userAgent.toLowerCase();
    $.browser.weixin = ua.match(/micromessenger/g) ? true : false;
    $.browser.ucbrowser = ua.match(/ucbrowser/g) ? true : false;
    $.browser.toutiao = /toutiao/gi.test(document.referrer) ? true : false;
}(window.Zepto || window.jQuery));

function loadLazyImage() {
    $('.lazy-load').each(function(idx, img) {
        var $img = $(img);
        var s = $img.data('src');
        if(s) {
            $img.attr('src', s);
        }
        $img.removeClass('lazy-load');
    });
}

;(function ($) { 
    if(!$.getScript) {
        var defer = $.Deferred();
        $.getScript = function(src, func) {
            var script = document.createElement('script');
            script.async = "async";
            script.src = src;
            script.onload = function() {
                defer.resolve();
            };
            script.onerror = function() {
                defer.reject();
            };
            setTimeout(function() {
                document.getElementsByTagName("head")[0].appendChild( script );
            });
            return defer;
        }
    }
})(window.Zepto || window.jQuery);

function regLoadMoreEvent(viewType, action, config) {
    viewType = viewType || 'listview';
    action = action || 'loadmore';
    config = config || gListViewConfig || {};
    $('#loadMore').click(function() {
        var $this = $(this);
        $this.text('正在加载...');
        config.defer = $.Deferred();
        config.defer.done(function() {
            setTimeout(loadLazyImage, 400);
            formatDurationItems();
            $('.timeago').timeago().removeClass('timeago');
            if(typeof HandlerModule != 'undefined') {
                HandlerModule.initLazyLoadImage($(document.body));
            }
            $this.text('加载更多');
            if('pn' in window) {
                _gaq.push(['_trackPageview', pn]);   
            }
        });
        listener.trigger('com.neihanshequ', viewType, action, config);
    });
}

function checkUserLogin() {
    var user = isUserLogin();
    if(!user) {
        listener.trigger('com.neihanshequ', 'showNeedLogin');
        return false;
    }
    return true;
}

function updatePlatform(ctn, p) {
    ctn.find('li').removeClass('selected');
    $.each(p, function(idx, platform) {
        ctn.find('li[data-type="'+platform+'"]').addClass('selected');
    });
}

function gaTrack($t) {
    if($t.attr('ga_category') && 'gaevent' in window) {
        gaevent(
            $t.attr('ga_category'),
            $t.attr('ga_event'),
            $t.attr('ga_label'),
            $t.attr('ga_value')
        );
    }
}